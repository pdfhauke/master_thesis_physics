#now do a 1 dimensional fitting with the scipy.linalg.lstsq method

import numpy as np
from scipy.linalg import lstsq 
import matplotlib.pyplot as plt 
from pyarts import arts
from pyarts.plots import arts_lookup
import FluxSimulator as fsm
import pandas as pd 
import openpyxl as ol 
from artsLUT_lin_fitting import *

#define pressure grid 
#take pressure dependent cross section of ozone at 270 K 

# set frequency grid
min_wvn = 5
#min_wvn_micro = 0.01

max_wvn = 3210
#max_wvn_micro = 10

n_freq_lw = 200
wvn = np.linspace(min_wvn, max_wvn, n_freq_lw)
#wvn_micro = np.linspace(min_wvn_micro, max_wvn_micro, n_freq_lw)
f_grid_lw = arts.convert.kaycm2freq(wvn)
species = ['CO$_2$', 'O$_3$','CH$_4$']


# setup ARTS
flux_simulator_LUT = fsm.FluxSimulator("TESTLUT_SW")
flux_simulator_LUT.ws.f_grid = f_grid_lw
flux_simulator_LUT.set_species(
    ["CO2,CO2-CKDMT252","O3","CH4"]
)


# Wide LUT
flux_simulator_LUT.get_lookuptableWide(recalc=False)
LUT = flux_simulator_LUT.ws.abs_lookup.value

#import physical parameters from table 
physical_params = pd.read_excel('/Users/hdamerow/master_thesis/1 dim fits of the p_dependent absorption cross section_LUT_O3_CO2_atm.xlsx', sheet_name = 'Sheet2')

#import same excel file as workbook 
excel_table_cross_sections = ol.load_workbook('/Users/hdamerow/master_thesis/1 dim fits of the p_dependent absorption cross section_LUT_O3_CO2_atm.xlsx')
excel_sheet_cross_sections = excel_table_cross_sections['Sheet1']

#temperature = physical_params.iat[4,2]
#temperature = physical_params.at[4,'[K]']
#print("excel temperature", temperature)

temperaturepoint = 5
specienumber = 1
frequencynumber = 62
pressure = 11
temperature = LUT.t_pert[temperaturepoint] + LUT.t_ref[temperaturepoint]

x = np.log10(LUT.p_grid)
#x = LUT.p_grid
y = np.log10(LUT.xsec[temperaturepoint,specienumber,frequencynumber,:]) 
#y = LUT.xsec[temperaturepoint,specienumber,frequencynumber,:]
#y = 1/(LUT.xsec[temperaturepoint,specienumber,frequencynumber,:]) 
#sigmoid y
#y = 1/(np.exp(-LUT.xsec[temperaturepoint,specienumber,frequencynumber,:])+1) 


#try out 1 dimensioal fitting of temmperature at fixed low pressure 
#x = np.array(LUT.t_pert + LUT.t_ref)
#y = np.log10(LUT.xsec[:,specienumber,frequencynumber,pressure]) 

"""""

#first do linear fit 
def lin_fit(x, y):
    #tell which fit you want to do 
    #here a linear fit at x 
    M = np.ones((len(x),2))
    M[:,1] = x
    #M[:,2] = 
    #M[:,3] = x**3

    #do the linear fit
    poly, res, s, sing = lstsq(M,y)

    print("linear fit poly", poly)
    return poly 

"""""

#function to evaluate the linear fit quality 
#res is always sum of squared residuals 
def lin_fit_qual(x, y):
    #tell which fit you want to do 
    #here a linear fit at x 
    M = np.ones((len(x),2))
    M[:,1] = x
    #M[:,2] = 
    #M[:,3] = x**3

    #do the linear fit
    poly, res, s, sing = lstsq(M,y)
    print(poly)
    return res

#get linear fit quality 
polylinqual = lin_fit_qual(x,y)

# get the linear fit function 
def d(x):
    d = poly[0] +poly[1] * x
    return d 

poly = lin_fit(x,y)


#do a quadratic fit 
def quad_fit(x, y):
    #tell which fit you want to do 
    #here a linear fit at x 
    M = np.ones((len(x),3))
    M[:,1] = x
    M[:,2] = x**2
    #M[:,3] = x**3

    #do the quad fit
    poly, res, s, sing = lstsq(M,y)

    print(poly)
    return poly 

#evaluate the quadratic fit function, returns res 
#res is always sum of squared residuals 
def quad_fit_quality(x, y):
    #tell which fit you want to do 
    #here a linear fit at x 
    M = np.ones((len(x),3))
    M[:,1] = x
    M[:,2] = x**2
    #M[:,3] = x**3

    #do the quad fit
    poly, res, s, sing = lstsq(M,y)

    print(poly)
    return res


#get quad fit function object
polyquad = quad_fit(x,y)

#object encapsulates the quality of the quadratic fit 
polyquadqual = quad_fit_quality(x,y)

# get the quadratic fit function 
def d2(x):
    d2 = polyquad[0] +polyquad[1] * x +polyquad[2]* x**2 
    return d2 
    
#do the cubic fitting 
def cube_fit(x, y):
    #tell which fit you want to do 
    #here a linear fit at x 
    M = np.ones((len(x),4))
    M[:,1] = x
    M[:,2] = x**2
    M[:,3] = x**3

    #do the cubic fit
    poly, res, s, sing = lstsq(M,y)

    #print(poly)
    return poly 

#oject encapsulates the cubic fitting
polycube = cube_fit(x,y)

# get the cubic fit function 
def d3(x):
    d3 = polycube[0] +polycube[1] * x +polycube[2]* x**2 + polycube[3] * x**3
    return d3 

#evaluate the cubic fit quality 
#res is always sum of squared residuals 
def cube_fit_qual(x, y):
    #tell which fit you want to do 
    #here a linear fit at x 
    M = np.ones((len(x),4))
    M[:,1] = x
    M[:,2] = x**2
    M[:,3] = x**3

    #do the cubic fit
    poly, res, s, sing = lstsq(M,y)
    return res


#now do a general polynomic fit  
def poly_fit(x, y, n):
    #tell which fit you want to do 
    #here a linear fit at x 
    M = np.ones((len(x),(n+1)))
    i = 1
    while i < (n + 1):
        M[:,i] = x**i
        i = i + 1 
    #M[:,2] = 
    #M[:,3] = x**3

    #do the linear fit
    poly, res, s, sing = lstsq(M,y)

    print("linear fit poly of order ",n, "is", poly)
    return poly 

def d_poly(x, n):
    i = 0
    interres = 0
    d = 0
    while i < (n+1):
        interres = poly_poly[i] * x**i 
        d = d + interres
        i = i + 1
    return d 

#object encapsulates the polynomial fitting 
poly_poly = poly_fit(x,y, 4)

def poly_fit_qual(x, y, n):
    #tell which fit you want to do 
    #here a linear fit at x 
    M = np.ones((len(x),(n+1)))
    i = 1
    while i < (n + 1):
        M[:,i] = x**i
        i = i + 1 
    #M[:,2] = 
    #M[:,3] = x**3

    #do the linear fit
    poly, res, s, sing = lstsq(M,y)

    print("linear fit poly of order ",n, "is", poly)
    return res, n 
#encapsulates the quality of the polynomial fit and its order 
fitted_z_data_poly_res = poly_fit_qual(x,y,4)


#print put the relative squared error 
#later deleting 
print("Res of the polynomial fitting with order ",fitted_z_data_poly_res[1], "is ",fitted_z_data_poly_res[0])


#only short testing od the general polynomial fit
#later deleting
plt.plot(x, d_poly(x,4))
plt.plot(x, y, 'o')
plt.show()


#now try to do the plotting and fiting at a special frequency and temperature as a extra function 

temperaturepoint = 5
specienumber = 1
frequencynumber = 62
pressure = 11
i = 4

def fitting_process(temperaturepoint, specienumber, frequencynumber,i):

    temperaturepoint = temperaturepoint
    specienumber = specienumber
    frequencynumber = frequencynumber
    x = np.log10(LUT.p_grid)
    #x = LUT.p_grid
    #y = LUT.xsec[temperaturepoint,specienumber,frequencynumber,:]/x
    y = np.log10(LUT.xsec[temperaturepoint,specienumber,frequencynumber,:])
    #y = 1/(np.exp(-LUT.xsec[temperaturepoint,specienumber,frequencynumber,:])+1) 

    #do the cubic fitting 
    def cube_fit(x, y):
        #tell which fit you want to do 
        #here a linear fit at x 
        M = np.ones((len(x),4))
        M[:,1] = x
        M[:,2] = x**2
        M[:,3] = x**3

        #do the cubic fit
        poly, res, s, sing = lstsq(M,y)

        #print(poly)
        return poly 

    #oject encapsulates the cubic fitting
    polycube = cube_fit(x,y)

    # get the cubic fit function 
    def d3(x):
        d3 = polycube[0] +polycube[1] * x +polycube[2]* x**2 + polycube[3] * x**3
        return d3 

    #now do a general polynomic fit  
    def poly_fit(x, y, n):
        #tell which fit you want to do 
        #here a linear fit at x 
        M = np.ones((len(x),(n+1)))
        i = 1
        while i < (n + 1):
            M[:,i] = x**i
            i = i + 1 
        #M[:,2] = 
        #M[:,3] = x**3

        #do the linear fit
        poly, res, s, sing = lstsq(M,y)
        print("linear fit poly of order ",n, "is", poly)
        return poly

    #object encapsulates the polynomial fitting 
    poly_poly = poly_fit(x,y, 4)

    def d_poly(x, n):
        i = 0
        interres = 0
        d = 0
        while i < (n+1):
            interres = poly_poly[i] * x**i 
            d = d + interres
            i = i + 1
        return d 
    
    def poly_fit_qual(x, y, n):
    #tell which fit you want to do 
    #here a linear fit at x 
        M = np.ones((len(x),(n+1)))
        i = 1
        while i < (n + 1):
            M[:,i] = x**i
            i = i + 1 
        #M[:,2] = 
        #M[:,3] = x**3

        #do the linear fit
        poly, res, s, sing = lstsq(M,y)
        print("linear fit poly of order ",n, "is", poly)
        return res,n


    #object encasulates the cubic fit quality 
    #standard deviation of all simulations 
    polycubequal = cube_fit_qual(x,y)
    print("polypolyres", poly_poly)
    polycubequal_std  = np.sqrt(polycubequal/(len(x)*(len(x)-1)))
    polycubequal_rmse = np.sqrt(polycubequal/len(x))

    #object encasulates the general polynomic fit quality 
    #standard deviation of all simulations 
    #here for polynom of 4th order
    polypolyqual = poly_fit_qual(x,y,4)
    print("polypolyqual", polypolyqual)
    polypolyqual_std  = np.sqrt(polypolyqual[0]/(len(x)*(len(x)-1)))
    polypolyqual_rmse = np.sqrt(polypolyqual[0]/len(x))

    #array with the residuals between trignomically fitted and data of precise simulation
    d_residuals = d3(x) - y 
    d_residuals_relative = np.array(d_residuals)/abs(y)
    #maximal and minimal absolute deviation of fit and data 
    d_residuals = np.array(d_residuals)
    d_residuals_abs = abs(d_residuals)
    min_residual = np.min(d_residuals_abs) 
    max_residual = np.max(d_residuals_abs)
    #maximal and minimal relative deviation 
    #be careful with the case when you have many same deviations and with the sign 
    index_min_rel = np.argwhere(d_residuals_abs == min_residual)
    index_min_rel = index_min_rel[0][0]
    #min_residual_relative = min_residual/y[index_min_rel]
    min_residual_relative = d_residuals[index_min_rel]/abs(y[index_min_rel])


    index_max_rel = np.argwhere(d_residuals_abs == max_residual)
    index_max_rel = index_max_rel[0][0]
    #max_residual_relative = max_residual/y[index_max_rel]
    max_residual_relative = d_residuals[index_max_rel]/abs(y[index_max_rel])

    #the best indicator is the relative squared error (R^2 error) for a regression fit, that sould be at least 0.95
    #here omly for cubic fitting 
    mean_vector = np.mean(y)*y/y
    r_squared = 1 - polycubequal/(np.sum((y - mean_vector)**2))
    print("mean vector", np.mean(y)*y/y)

    #the best indicator is the relative squared error (R^2 error) for a regression fit, that sould be at least 0.95
    #here for general polynomial fitting 
    mean_vector = np.mean(y)*y/y
    r_squared_poly = 1 - polypolyqual[0]/(np.sum((y - mean_vector)**2))
    #print("mean vector", np.mean(y)*y/y)
    print("The R2 error for a polynomial of the", polypolyqual[1], "order is", r_squared_poly)


    #plot data and fits 
    fig1, (ax1,ax2) = plt.subplots(nrows=2, ncols =1, sharex = True)
    #fig1, ax1 = plt.subplots(nrows=1, ncols =1)
    #ax1.plot(x,d(x), label = 'linear fit')
    #ax1.plot(x,d2(x), label = 'quadratic fit')
    ax1.loglog(x,d3(x), label = 'cubic fit')
    #ax1.semilogx(x,y,'o', label ='data')
    ax1.legend()
    #fig1, ax2 = plt.subplots()
    ax2.semilogx(x,d_residuals, label = 'absolute residuals of cubic fitting and data', color = 'red')
    ax2.legend(loc= 'lower left')
    ax3 = ax2.twinx()
    #ax3.loglog(x,100*d_residuals_relative, label = 'relative residuals of cubic fitting and data in %', color = 'green') 
    ax1.set_ylabel("$log10(p/p_0$)")
    ax1.set_xlabel("P [Pa]")
    ax2.set_xlabel("P [Pa]")
    ax1.set_ylabel("σ [m$^2$]")
    ax2.set_ylabel("σ [m$^2$]")
    #ax1.set_xlabel("T [K]")
    #ax2.set_xlabel("T [K]")
    #sigma is cross section 
    #ax1.set_ylabel("log10(σ/σ$_0$)")
    #ax2.set_ylabel("log10(σ/σ$_0$)")
    #ax1.set_xlabel("$log10(p/p_0$)")
    #ax2.set_xlabel("$log10(p/p_0$)")
    ax3.set_ylabel("[%]")
    ax3.tick_params(axis= 'y', labelcolor = 'green')
    ax3.legend(loc = 'upper left')
    #plt.ylabel("cross section [$m^2$]")
    #plt.legend()
    #plt.show()
    test = d3(x)
    print("sigmoid-plot",test[10])


    #give important additional information about physics of this set up 
    temperature = LUT.t_pert[temperaturepoint] + LUT.t_ref[temperaturepoint]
    freqkays = wvn[frequencynumber]
    species = ['CO2', 'O$_3','CH4']
    print("temperature: ",temperature)
    print("frequency: ", freqkays)
    print("species: ", species[specienumber])
    print("pressure: ", LUT.p_grid[pressure])
    #print("temperature array", LUT.t_pert, LUT.t_ref)
    #print("frequency array: ", wvn)

    #output the fitting quality numbers res from the lstsq fitting of different orders 
    #res is always sum of squared residuals 
    print("linear fit quality: ", polylinqual)
    print("quadratic fit quality: ", polyquadqual)
    print("cubic fit quality res: ", polycubequal)
    print("cubic fit quality rmse: ", polycubequal_rmse)
    print("cubic fit quality standard deviation: ", polycubequal_std)
    print("minimal absolute deviation between data and fit", d_residuals[index_min_rel], "this are ", min_residual_relative*100,"%" )
    print("maximal absolute deviation between data and fit", d_residuals[index_max_rel], "this are ", max_residual_relative*100,"%" )
    print("R$^2$: ", r_squared)
    #print("minimal residual", min_residual_relative*100 )
    print("index of minimal residual", index_min_rel )

    #put all relevant quality indices into one table for the cubic fitting 
    fit_quality_table = np.array([[species[specienumber], freqkays, temperature, polycubequal,polycubequal_rmse,r_squared, d_residuals[index_min_rel], min_residual_relative*100,d_residuals[index_max_rel],max_residual_relative*100]])
    index_fit_quality = ['cubic fit']
    columns_fit_quality = ['gas','frequency[cm$^(-1)$','temperature','cubic fit quality res', 'cubic fit quality rmse','R$^2$','minimal absolute deviation data and fit','minimal rel. deviation data and fit', 'maximal absolute deviation data and fit', 'maximal     relative deviation data and fit']
    fit_quality_table = pd.DataFrame(fit_quality_table,index_fit_quality,columns_fit_quality)
    print(fit_quality_table)

    #write the relevant parameters into the excel table 
    i = i + 1
    rmse_index = 'J' + str(i)
    excel_sheet_cross_sections[rmse_index] = polycubequal_rmse
    max_res_index = 'L' + str(i)
    excel_sheet_cross_sections[max_res_index] = max_residual_relative*100
    min_res_index = 'N' + str(i)
    excel_sheet_cross_sections[min_res_index] = min_residual_relative*100
    r2_res = 'O' + str(i)
    excel_sheet_cross_sections[r2_res] = r_squared*100

    #excel_table_cross_sections.save('/Users/hdamerow/master_thesis/1 dim fits of the p_dependent absorption cross section_LUT_O3_CO2_atm.xlsx')


    #storage the plot with presure dependance of absorption cross section fit and simlated data 
    #metadata =[temperature,freqkays]
    #path = '/Users/hdamerow/master_thesis/pictures Master thesis playground /1 dim fits /einsdim_1to3_order_with_uncertainty_fit_0.753cm^(-1)_240K_CO2.png'
    #plt.savefig(path)
    #save the temperature fitted plots 
    #path_temp = '/Users/hdamerow/master_thesis/pictures Master thesis playground /1 dim fits /einsdim_1to3_order_fit_1003cm^(-1)_CO2_temperature_fit.png'
    #plt.savefig(path_temp)


#here the central function that fittes and then plots fit, plot and residuals is called here 

#i = 10
#while i < 15:
#    frequencynumber = i
#    fitting_process(temperaturepoint,specienumber,frequencynumber)
#    i = i+1

fitting_process(temperaturepoint, specienumber, frequencynumber,4)
#physical_params_specialrows = pd.concat([physical_params.iloc[3:5],physical_params.iloc[7:9]])
physical_params_specialrows = physical_params
#.iloc[:17]
#now iterate over the whole excel table
#and plot all data and fits for the different frequencies in a single plot  
#fig1, (ax1,ax2) = plt.subplots(nrows=2, ncols =1, sharex = True)
fig1, ax1 = plt.subplots()
for index, row in physical_params_specialrows.iterrows():
    t = row['Column2']
    specie = row['specienumber ']
    frequency = row['Column1']
    #fitting_process(t,specie,frequency,(index+1))

    temperaturepoint = t
    specienumber = specie
    frequencynumber = frequency
    temperature = LUT.t_pert[temperaturepoint] + LUT.t_ref[temperaturepoint]
    x = np.log10(LUT.p_grid)
    #x = LUT.p_grid
    #y = np.log10(LUT.xsec[temperaturepoint,specienumber,frequencynumber,:]) 
    y = np.log10(LUT.xsec[temperaturepoint,specienumber,frequencynumber,:])
    #y = 1/(np.exp(-LUT.xsec[temperaturepoint,specienumber,frequencynumber,:])+1) 

    #do the cubic fitting 
    def cube_fit(x, y):
        #tell which fit you want to do 
        #here a linear fit at x 
        M = np.ones((len(x),4))
        M[:,1] = x
        M[:,2] = x**2
        M[:,3] = x**3

        #do the cubic fit
        poly, res, s, sing = lstsq(M,y)

        #print(poly)
        return poly 

    #oject encapsulates the cubic fitting
    polycube = cube_fit(x,y)

    # get the cubic fit function 
    def d3(x):
        d3 = polycube[0] +polycube[1] * x +polycube[2]* x**2 + polycube[3] * x**3
        return d3 


    #ax1.plot(x,d3(x), label = 'cubic fit')
    ax1.plot(x,y,'o', label ='data')
    ax1.plot(x,d3(x), label = f' {wvn[frequencynumber]:0.1f} cm$^{{-1}}$ {species[specie]} at {temperature:0.1f} K')
    print(d3(x))
    ax1.set_ylim([-55,-21])
    #ax1.set_ylabel("σ [m$^2$]")
    ax1.set_ylabel("log10(σ/σ$_0$)", fontsize = 30)
    #ax1.set_ylabel("σ [m$^2$]")
    ax1.set_xlabel("$log10(p/p_0$)", fontsize = 30)
    plt.xticks(fontsize = 25)
    plt.yticks(fontsize = 25) 
    ax1.legend(ncol = 3, loc = 'lower right', fontsize = 15)
    ax1.set_title("Cubic fit and computed data of the frequency dependent cross section of O$_3$ and CO$_2$", fontsize = 35)
    #and O$_3$, CO$_2$ peaks

    if index > 14:
        break
    print(frequency)
plt.show()


#now try out the 2 dimensional fit
#z_data = LUT.xsec[5,0,6,:]
#y = LUT.t_pert +LUT.t_ref
#x = np.log10(LUT.p_grid)

#x = np.array([0,2,4,6,8,10])
#y = np.array([1,10,20,40,60,80])
#X,Y = np.meshgrid(x,y)

#z_data =np.array([[1,2,4,6,10,12],[2,5,4,7,7,9,],[1,1,1,3,3,3,],[2,6,4,8,10,15],[2,3,2,3,2,3],[10,20,40,60,80,2]])
#z_data = np.ndarray.flatten(z_data)

#real interesting data 


x = np.log10(LUT.p_grid)
#print("T_pert shape", np.shape(LUT.t_pert))
#print("T_ref shape", np.shape(LUT.t_ref))
y = LUT.t_pert + LUT.t_ref
X,Y = np.meshgrid(x,y)
z_data = np.ndarray.flatten(np.log10(LUT.xsec[:,specienumber,frequencynumber,:]))
z_data_array = np.log10(LUT.xsec[:,specienumber,frequencynumber,:])


#z_data =np.array([[1,2,4,6,10,12],[2,5,4,7,7,9,],[1,1,1,3,3,3,],[2,6,4,8,10,15],[2,3,2,3,2,3],[10,20,40,60,80,2]])
#z_data = np.ndarray.flatten(z_data)
#z_data_array = np.array([[1,2,4,6,10,12],[2,5,4,7,7,9,],[1,1,1,3,3,3,],[2,6,4,8,10,15],[2,3,2,3,2,3],[10,20,40,60,80,2]])





def lin_fit_2dim(x,y,z):
    #tell which fit you want to do 
    #here a linear fit at x 
    
    #x = np.log10(LUT.p_grid)
    #y = LUT.t_pert + LUT.t_ref
    #z = np.array(z)
    #X,Y = np.meshgrid(x,y)
    #M = np.ones((144,3))
    #x_flatten = np.ndarray.flatten(x)
    #y_flatten = np.ndarray.flatten(y)
    #print(x_flatten)
    #print(y_flatten)
    #build your own M
    #import numpy as np 

    """"
        M = np.ones((144,3))
        i = 0   
        j = 0
        k = 0
        l = 0
        while i < 12:
            while l < 12:
                M[j,1] = x[i]
                j = j + 1
                l = l + 1
            i = i + 1
            l = 0
        j = 0
        l = 0
        i = 0
        while i < 12:
            while l < 12:
                M[j,2] = y[l]
                j = j + 1
                l = l + 1
            i = i + 1
            l = 0

        """""

    #x = np.log10(LUT.p_grid)
    #y = LUT.t_pert + LUT.t_ref
    z = np.array(z)
    X,Y = np.meshgrid(x,y)
    M = np.ones((144,3))
    x_flatten = np.ndarray.flatten(X)
    y_flatten = np.ndarray.flatten(Y)
    #M = np.ones((len(x),3))
    #M = np.ones((144,3))
    #print(x_flatten)
    #print(y_flatten)
    M[:,1] = x_flatten  
    M[:,2] = y_flatten
    #M[:,3] = x**3
    #  do the quad fit
    poly, res, s, sing = lstsq(M,z)
    #print(poly)
    #print(res)
    #print("M-Matrix: ", M)
    return poly
#object encapsulates the 2 dimesional log(p)-log(T) fitting at a fixed frequency of the log(cross section)
result = lin_fit_2dim(x,y,z_data)
#print (np.shape(z_data))

#construct the 2 dimensional linear fitting function 
def lin_fit_2dim_func(x,y):
    z = result[0] + result[1] * x + result[2] *y
    #z = -26.98 + 0.8688 * x + result[2] *y*0
    return z 

#object encapsulates the 2 dimesional linear fitting function 
fitted_z_data = lin_fit_2dim_func(X,Y)
print(fitted_z_data)

#evaluates fitting quality of your 2 dimensional linear fitting plot 
def lin_fit_2dim_qual(x,y,z):
    #x = np.log10(LUT.p_grid)
    #y = LUT.t_pert + LUT.t_ref
    z = np.array(z)
    X,Y = np.meshgrid(x,y)
    M = np.ones((144,3))
    x_flatten = np.ndarray.flatten(X)
    y_flatten = np.ndarray.flatten(Y)
    #M = np.ones((len(x),3))
    #M = np.ones((144,3))
    #print(x_flatten)
    #print(y_flatten)
    M[:,1] = x_flatten  
    M[:,2] = y_flatten
    #M[:,3] = x**3
    #  do the quad fit
    poly, res, s, sing = lstsq(M,z)
    #print(poly)
    #print(res)
    #print("M-Matrix: ", M)
    return res

#now the fitting quality evaluation function from the 2 dimensional fittimg is called and finally output 
fitted_z_data_res = lin_fit_2dim_qual(x,y,z_data)
print("2 dim res error is ",fitted_z_data_res )
mean_vector_2dim = np.mean(z_data)*z_data/z_data
r_squared_2dim = 1 - fitted_z_data_res/(np.sum((z_data - mean_vector_2dim)**2))
print("2 dim R$^2$ is: ", r_squared_2dim)

#now print in a 3 dimensioanl plot the 2 dimensional function of the p-T dependance of the absorption cross section 
fig, ax = plt.subplots(subplot_kw = {"projection":"3d"})
ax.plot_surface(X,Y,z_data_array)
ax.scatter(X,Y,z_data_array)
ax.set_ylabel("T [K]")
ax.set_xlabel("log(p/p$_0$)")
ax.set_zlabel("log(σ/σ$_0$)")
#sigma is the absorption cross section 
ax.set_title("log(σ/σ$_0$) p-T-fit at  295 cm$^{-1}$ of O$_3$")
ax.plot_surface(X,Y,fitted_z_data, cmap ='viridis')
plt.show()
X,Y = np.meshgrid(x,y)
#M = np.ones((144,3))
x_flatten = np.ndarray.flatten(X)
print(np.shape(X))
print(np.shape(x_flatten))
#path_2dim = '/Users/hdamerow/master_thesis/pictures Master thesis playground /2dim_plot_log(crosssection)_CO2_109cm^(-1).png'
#plt.savefig(path_2dim)





"""""
#build your own M
x = np.array([0,2,4,6,8,10])
y = np.array([1,10,20,40,60,80])
import numpy as np 
M = np.ones((36,3))
i = 0
j = 0
k = 0
l = 0
while i < 6:
    while l < 6:
        M[j,1] = x[i]
        j = j + 1
        l = l + 1
    i = i + 1
    l = 0

j = 0
l = 0
i = 0
while i < 6:
    while l < 6:
        M[j,2] = y[l]
        j = j + 1
        l = l + 1
    i = i + 1
    l = l + 1
"""""

#print("2dim coefficients", result)
#print ("M", M)
#print(z_data)